#plot MSE and max error for test "ConvCell_QuantizerSAT_BNFusion_LeNet_Frame_CUDA"
#inputs are the *.dat files which are generated by the test ConvCell_QuantizerSAT_BNFusion_LeNet_TestDatabase_Frame_CUDA_float

import matplotlib.pyplot as plt

try:
    f_mse = open("/home/ik243221/plots/bnFusionTest/bnFusionTest_MNIST_MSE.dat", 'r')

    mse = []
    for line in f_mse:
        values = [float(s) for s in line.split()]
        mse.append(values[0])
            
    num_bins = 100
    fig, ax = plt.subplots()
    n, bins, patches = ax.hist(mse, num_bins, density=False, color = "lightsteelblue", ec="slategray")
    ax.set_xlabel('Mean squared error')
    ax.set_ylabel('Entries')
    fig.tight_layout()
    plt.savefig("mse_bnFusion_quant_SAT.png")
except IOError:
    print("File not accessible")
finally:
    f_mse.close()
    

try:
    f_mse_r = open("/home/ik243221/plots/bnFusionTest/bnFusionTest_MNIST_MSE_R.dat", 'r')
    mse_r = []
    for line in f_mse_r:
        values_r = [float(s) for s in line.split()]
        mse_r.append(values_r[0])

    fig_r, ax_r = plt.subplots()
    n_r, bins_r, patches_r = ax_r.hist(mse_r, num_bins, density=False, color = "lightsteelblue", ec="slategray")
    ax_r.set_xlabel('Mean squared error (round)')
    ax_r.set_ylabel('Entries')
    fig_r.tight_layout()
    plt.savefig("mse_r_bnFusion_quant_SAT.png")
except IOError:
    print("File not accessible")
finally:
    f_mse_r.close()

try:
    f_mse_max = open("/home/ik243221/plots/bnFusionTest/bnFusionTest_MNIST_MSE_MAX.dat", 'r')
    mse_max = []
    for line in f_mse_max:
        values_max = [float(s) for s in line.split()]
        mse_max.append(values_max[0])
        
    num_bins_int = 6
        
    fig_max, ax_max = plt.subplots()
    n_max, bins_max, patches_max = ax_max.hist(mse_max, num_bins_int, density=False, color = "lightsteelblue", ec="steelblue")
    ax_max.set_xlabel('Max error')
    ax_max.set_ylabel('Entries')
    fig_max.tight_layout()
    plt.savefig("max_err_bnFusion_quant_SAT.png")
except IOError:
    print("File not accessible")
finally:
    f_mse_max.close()


