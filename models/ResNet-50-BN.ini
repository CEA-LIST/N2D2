;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;    (C) Copyright 2017 CEA LIST. All Rights Reserved.
;    Contributor(s): Olivier BICHLER (olivier.bichler@cea.fr)
;
;    This software is governed by the CeCILL-C license under French law and
;    abiding by the rules of distribution of free software.  You can  use,
;    modify and/ or redistribute the software under the terms of the CeCILL-C
;    license as circulated by CEA, CNRS and INRIA at the following URL
;    "http://www.cecill.info".
;
;    As a counterpart to the access to the source code and  rights to copy,
;    modify and redistribute granted by the license, users are provided only
;    with a limited warranty  and the software's author,  the holder of the
;    economic rights,  and the successive licensors  have only  limited
;    liability.
;
;    The fact that you are presently reading this means that you have had
;    knowledge of the CeCILL-C license and that you accept its terms.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Implements ResNet-50:
; https://arxiv.org/abs/1512.03385

; Training for 90 epochs (1281167 * 90), log every epoch
; ./n2d2.sh "$N2D2_MODELS/ResNet-50-BN.ini" -learn 115305030 -log 1281167

$NB_CLASSES=1000
; Resolution: 224 192 160 128
$SIZE=224
; Margin for random cropping during learning
$MARGIN=32
; Width Multiplier: 1.0 0.75 0.5 0.25
$ALPHA=1.0

; Number of residual branches for ZeroInit
$L=0   ; 0 = no ZeroInit

; Training parameters
$LR=0.1
$WD=0.0001
$MOMENTUM=0.9
$BATCH_SIZE=64
$ITER_SIZE=4
$EPOCHS=90

DefaultModel=Frame_CUDA

; Database
[database]
Type=ILSVRC2012_Database
RandomPartitioning=0
Learn=1.0

; Environment
[sp]
SizeX=${SIZE}
SizeY=${SIZE}
NbChannels=3
BatchSize=${BATCH_SIZE}

[sp.Transformation-1]
Type=RescaleTransformation
Width=$(${SIZE} + ${MARGIN})
Height=$(${SIZE} + ${MARGIN})
KeepAspectRatio=1
ResizeToFit=0

[sp.Transformation-2]
Type=PadCropTransformation
Width=[sp.Transformation-1]Width
Height=[sp.Transformation-1]Height

[sp.Transformation-3]
Type=ColorSpaceTransformation
ColorSpace=BGR

[sp.Transformation-4]
Type=RangeAffineTransformation
FirstOperator=Minus
FirstValue=103.94 116.78 123.68 ; BGR format, same as in Caffe
SecondOperator=Multiplies
SecondValue=0.017

[sp.Transformation-6]
Type=SliceExtractionTransformation
ApplyTo=NoLearn
Width=[sp]SizeX
Height=[sp]SizeY
OffsetX=$(${MARGIN} / 2)
OffsetY=$(${MARGIN} / 2)

[sp.OnTheFlyTransformation-5]
Type=SliceExtractionTransformation
ApplyTo=LearnOnly
Width=[sp]SizeX
Height=[sp]SizeY
RandomOffsetX=1
RandomOffsetY=1

[sp.OnTheFlyTransformation-6]
Type=FlipTransformation
ApplyTo=LearnOnly
RandomHorizontalFlip=1

[conv_def]
Type=Conv
ActivationFunction=Rectifier
WeightsFiller=HeFiller
ConfigSection=common.config

; conv1
[conv1] conv_def
Input=sp
KernelDims=7 7
NbOutputs=$(int(64 * ${ALPHA}))
Stride=2
Padding=3

[pool1]
Input=conv1
Type=Pool
PoolDims=3 3
NbOutputs=[conv1]NbOutputs
Stride=2
Pooling=Max
Mapping.Size=1

; conv2.x (x3)
[conv2.1@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=pool1
NB_FILTERS=$(int(64 * ${ALPHA}))
STRIDES=1
PROJECTION_SHORTCUT=1

[conv2.2@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv2.1_sum
NB_FILTERS=$(int(64 * ${ALPHA}))
STRIDES=1

[conv2.3@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv2.2_sum
NB_FILTERS=$(int(64 * ${ALPHA}))
STRIDES=1
NO_RELU=1

[bn2]
Input=conv2.3_sum
Type=BatchNorm
NbOutputs=[conv2.3_sum]NbOutputs
ActivationFunction=Rectifier

; conv3.x (x4)
[conv3.1@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=bn2
NB_FILTERS=$(int(128 * ${ALPHA}))
STRIDES=2
PROJECTION_SHORTCUT=1

[conv3.2@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv3.1_sum
NB_FILTERS=$(int(128 * ${ALPHA}))
STRIDES=1

[conv3.3@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv3.2_sum
NB_FILTERS=$(int(128 * ${ALPHA}))
STRIDES=1

[conv3.4@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv3.3_sum
NB_FILTERS=$(int(128 * ${ALPHA}))
STRIDES=1
NO_RELU=1

[bn3]
Input=conv3.4_sum
Type=BatchNorm
NbOutputs=[conv3.4_sum]NbOutputs
ActivationFunction=Rectifier

; conv4.x (x6)
[conv4.1@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=bn3
NB_FILTERS=$(int(256 * ${ALPHA}))
STRIDES=2
PROJECTION_SHORTCUT=1

[conv4.2@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv4.1_sum
NB_FILTERS=$(int(256 * ${ALPHA}))
STRIDES=1

[conv4.3@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv4.2_sum
NB_FILTERS=$(int(256 * ${ALPHA}))
STRIDES=1

[conv4.4@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv4.3_sum
NB_FILTERS=$(int(256 * ${ALPHA}))
STRIDES=1

[conv4.5@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv4.4_sum
NB_FILTERS=$(int(256 * ${ALPHA}))
STRIDES=1

[conv4.6@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv4.5_sum
NB_FILTERS=$(int(256 * ${ALPHA}))
STRIDES=1
NO_RELU=1

[bn4]
Input=conv4.6_sum
Type=BatchNorm
NbOutputs=[conv4.6_sum]NbOutputs
ActivationFunction=Rectifier

; conv5.x (x3)
[conv5.1@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=bn4
NB_FILTERS=$(int(512 * ${ALPHA}))
STRIDES=2
PROJECTION_SHORTCUT=1

[conv5.2@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv5.1_sum
NB_FILTERS=$(int(512 * ${ALPHA}))
STRIDES=1

[conv5.3@${N2D2_MODELS}/ResNet-bottleneck_block.ini.tpl]
INPUT=conv5.2_sum
NB_FILTERS=$(int(512 * ${ALPHA}))
STRIDES=1
NO_RELU=1

[bn5]
Input=conv5.3_sum
Type=BatchNorm
NbOutputs=[conv5.3_sum]NbOutputs
ActivationFunction=Rectifier

[pool]
Input=bn5
Type=Pool
PoolDims=[conv5.3_sum]_OutputsWidth [conv5.3_sum]_OutputsHeight
NbOutputs=[conv5.3_sum]NbOutputs
Stride=1
Pooling=Average
Mapping.ChannelsPerGroup=1

[fc]
Input=pool
Type=Fc
NbOutputs=${NB_CLASSES}
ActivationFunction=Linear
WeightsFiller=XavierFiller
WeightsFiller.Scaling=$(0.0 if ${L} > 0 else 1.0)
BiasFiller=ConstantFiller
BiasFiller.Value=0.0
ConfigSection=common.config,fc.config

[softmax]
Input=fc
Type=Softmax
NbOutputs=[fc]NbOutputs
WithLoss=1

[softmax.Target]
TopN=5

[common.config]
NoBias=1
WeightsSolver.LearningRate=${LR}
WeightsSolver.Decay=${WD}
BiasSolver.LearningRate=$(2.0 * ${LR})
BiasSolver.Decay=0.0
Solvers.Momentum=${MOMENTUM}
Solvers.LearningRatePolicy=PolyDecay
Solvers.Power=1.0
Solvers.IterationSize=${ITER_SIZE}
Solvers.MaxIterations=$([sp]_EpochSize * ${EPOCHS} / (${BATCH_SIZE} * ${ITER_SIZE}))

[fc.config]
NoBias=0
