;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;    (C) Copyright 2017 CEA LIST. All Rights Reserved.
;    Contributor(s): Olivier BICHLER (olivier.bichler@cea.fr)
;
;    This software is governed by the CeCILL-C license under French law and
;    abiding by the rules of distribution of free software.  You can  use,
;    modify and/ or redistribute the software under the terms of the CeCILL-C
;    license as circulated by CEA, CNRS and INRIA at the following URL
;    "http://www.cecill.info".
;
;    As a counterpart to the access to the source code and  rights to copy,
;    modify and redistribute granted by the license, users are provided only
;    with a limited warranty  and the software's author,  the holder of the
;    economic rights,  and the successive licensors  have only  limited
;    liability.
;
;    The fact that you are presently reading this means that you have had
;    knowledge of the CeCILL-C license and that you accept its terms.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Implements MobileNet:
; https://arxiv.org/pdf/1704.04861.pdf

; Note: this implementation is WITHOUT batch normalization

; Training for 120 epochs (1281167 * 120), log every epoch
; ./n2d2.sh "$N2D2_MODELS/MobileNet_v2.ini" -learn 153740040 -log 1281167

; Resolution: 224 192 160 128
$SIZE=160
; Margin for random cropping during learning
$MARGIN=32
; Width Multiplier: 1.0 0.75 0.5 0.25
$ALPHA=0.5

; Training parameters
$LR=0.1
$WD=0.0001
$MOMENTUM=0.9
$BATCH_SIZE=256
$EPOCHS=120

DefaultModel=Frame_CUDA

; Database
[database]
Type=ILSVRC2012_Database
RandomPartitioning=0
Learn=1.0

; Environment
[sp]
SizeX=${SIZE}
SizeY=${SIZE}
NbChannels=3
BatchSize=${BATCH_SIZE}

[sp.Transformation-1]
Type=RescaleTransformation
Width=$(${SIZE} + ${MARGIN})
Height=$(${SIZE} + ${MARGIN})
KeepAspectRatio=1
ResizeToFit=0

[sp.Transformation-2]
Type=PadCropTransformation
Width=[sp.Transformation-1]Width
Height=[sp.Transformation-1]Height

[sp.Transformation-3]
Type=ColorSpaceTransformation
ColorSpace=BGR

[sp.Transformation-4]
Type=RangeAffineTransformation
FirstOperator=Minus
FirstValue=103.94 116.78 123.68 ; BGR format, same as in Caffe
SecondOperator=Multiplies
SecondValue=0.017

[sp.Transformation-6]
Type=SliceExtractionTransformation
ApplyTo=NoLearn
Width=[sp]SizeX
Height=[sp]SizeY
OffsetX=$(${MARGIN} / 2)
OffsetY=$(${MARGIN} / 2)

[sp.OnTheFlyTransformation-5]
Type=SliceExtractionTransformation
ApplyTo=LearnOnly
Width=[sp]SizeX
Height=[sp]SizeY
RandomOffsetX=1
RandomOffsetY=1

[sp.OnTheFlyTransformation-6]
Type=FlipTransformation
ApplyTo=LearnOnly
RandomHorizontalFlip=1

[conv_def]
Type=Conv
ActivationFunction=Rectifier
WeightsFiller=HeFiller
ConfigSection=common.config

[conv1] conv_def
Input=sp
KernelSize=3
NbOutputs=$(int(32 * ${ALPHA}))
Stride=2
Padding=1

[conv2_1_expand] conv_def
Input=conv1
KernelSize=1
NbOutputs=$(int(32 * ${ALPHA}))

[conv2_1_dwise] conv_def
Input=conv2_1_expand
KernelSize=3
NbOutputs=$(int(32 * ${ALPHA}))
Padding=1
Mapping.ChannelsPerGroup=1

[conv2_1_linear] conv_def
Input=conv2_1_dwise
KernelSize=1
NbOutputs=$(int(16 * ${ALPHA}))
ActivationFunction=Linear

[conv2_2_expand] conv_def
Input=conv2_1_linear
KernelSize=1
NbOutputs=$(int(96 * ${ALPHA}))

[conv2_2_dwise] conv_def
Input=conv2_2_expand
KernelSize=3
NbOutputs=$(int(96 * ${ALPHA}))
Stride=2
Padding=1
Mapping.ChannelsPerGroup=1

[conv2_2_linear] conv_def
Input=conv2_2_dwise
KernelSize=1
NbOutputs=$(int(24 * ${ALPHA}))
ActivationFunction=Linear

[conv3_1_expand] conv_def
Input=conv2_2_linear
KernelSize=1
NbOutputs=$(int(144 * ${ALPHA}))

[conv3_1_dwise] conv_def
Input=conv3_1_expand
KernelSize=3
NbOutputs=$(int(144 * ${ALPHA}))
Padding=1
Mapping.ChannelsPerGroup=1

[conv3_1_linear] conv_def
Input=conv3_1_dwise
KernelSize=1
NbOutputs=$(int(24 * ${ALPHA}))
ActivationFunction=Linear

[block_3_1]
Input=conv2_2_linear,conv3_1_linear
Type=ElemWise
Operation=Sum
NbOutputs=[conv2_2_linear]NbOutputs

[conv3_2_expand] conv_def
Input=block_3_1
KernelSize=1
NbOutputs=$(int(144 * ${ALPHA}))

[conv3_2_dwise] conv_def
Input=conv3_2_expand
KernelSize=3
Padding=1
Stride=2
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(144 * ${ALPHA}))

[conv3_2_linear] conv_def
Input=conv3_2_dwise
KernelSize=1
NbOutputs=$(int(32 * ${ALPHA}))
ActivationFunction=Linear

[conv4_1_expand] conv_def
Input=conv3_2_linear
KernelSize=1
NbOutputs=$(int(192 * ${ALPHA}))

[conv4_1_dwise] conv_def
Input=conv4_1_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(192 * ${ALPHA}))

[conv4_1_linear] conv_def
Input=conv4_1_dwise
KernelSize=1
NbOutputs=$(int(32 * ${ALPHA}))
ActivationFunction=Linear

[block_4_1]
Input=conv3_2_linear,conv4_1_linear
Type=ElemWise
Operation=Sum
NbOutputs=[conv3_2_linear]NbOutputs

[conv4_2_expand] conv_def
Input=block_4_1
KernelSize=1
NbOutputs=$(int(192 * ${ALPHA}))

[conv4_2_dwise] conv_def
Input=conv4_2_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(192 * ${ALPHA}))

[conv4_2_linear] conv_def
Input=conv4_2_dwise
KernelSize=1
NbOutputs=$(int(32 * ${ALPHA}))
ActivationFunction=Linear

[block_4_2]
Input=block_4_1,conv4_2_linear
Type=ElemWise
Operation=Sum
NbOutputs=[block_4_1]NbOutputs

[conv4_3_expand] conv_def
Input=block_4_2
KernelSize=1
NbOutputs=$(int(192 * ${ALPHA}))

[conv4_3_dwise] conv_def
Input=conv4_3_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(192 * ${ALPHA}))

[conv4_3_linear] conv_def
Input=conv4_3_dwise
KernelSize=1
NbOutputs=$(int(64 * ${ALPHA}))
ActivationFunction=Linear

[conv4_4_expand] conv_def
Input=conv4_3_linear
KernelSize=1
NbOutputs=$(int(384 * ${ALPHA}))

[conv4_4_dwise] conv_def
Input=conv4_4_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(384 * ${ALPHA}))

[conv4_4_linear] conv_def
Input=conv4_4_dwise
KernelSize=1
NbOutputs=$(int(64 * ${ALPHA}))
ActivationFunction=Linear

[block_4_4]
Input=conv4_3_linear,conv4_4_linear
Type=ElemWise
Operation=Sum
NbOutputs=[conv4_3_linear]NbOutputs

[conv4_5_expand] conv_def
Input=block_4_4
KernelSize=1
NbOutputs=$(int(384 * ${ALPHA}))

[conv4_5_dwise] conv_def
Input=conv4_5_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(384 * ${ALPHA}))

[conv4_5_linear] conv_def
Input=conv4_5_dwise
KernelSize=1
NbOutputs=$(int(64 * ${ALPHA}))
ActivationFunction=Linear

[block_4_5]
Input=block_4_4,conv4_5_linear
Type=ElemWise
Operation=Sum
NbOutputs=[block_4_4]NbOutputs

[conv4_6_expand] conv_def
Input=block_4_5
KernelSize=1
NbOutputs=$(int(384 * ${ALPHA}))

[conv4_6_dwise] conv_def
Input=conv4_6_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(384 * ${ALPHA}))

[conv4_6_linear] conv_def
Input=conv4_6_dwise
KernelSize=1
NbOutputs=$(int(64 * ${ALPHA}))
ActivationFunction=Linear

[block_4_6]
Input=block_4_5,conv4_6_linear
Type=ElemWise
Operation=Sum
NbOutputs=[block_4_5]NbOutputs

[conv4_7_expand] conv_def
Input=block_4_6
KernelSize=1
NbOutputs=$(int(384 * ${ALPHA}))

[conv4_7_dwise] conv_def
Input=conv4_7_expand
KernelSize=3
Padding=1
Stride=2
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(384 * ${ALPHA}))

[conv4_7_linear] conv_def
Input=conv4_7_dwise
KernelSize=1
NbOutputs=$(int(96 * ${ALPHA}))
ActivationFunction=Linear

[conv5_1_expand] conv_def
Input=conv4_7_linear
KernelSize=1
NbOutputs=$(int(576 * ${ALPHA}))

[conv5_1_dwise] conv_def
Input=conv5_1_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(576 * ${ALPHA}))

[conv5_1_linear] conv_def
Input=conv5_1_dwise
KernelSize=1
NbOutputs=$(int(96 * ${ALPHA}))
ActivationFunction=Linear

[block_5_1]
Input=conv4_7_linear,conv5_1_linear
Type=ElemWise
Operation=Sum
NbOutputs=[conv4_7_linear]NbOutputs

[conv5_2_expand] conv_def
Input=block_5_1
KernelSize=1
NbOutputs=$(int(576 * ${ALPHA}))

[conv5_2_dwise] conv_def
Input=conv5_2_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(576 * ${ALPHA}))

[conv5_2_linear] conv_def
Input=conv5_2_dwise
KernelSize=1
NbOutputs=$(int(96 * ${ALPHA}))
ActivationFunction=Linear

[block_5_2]
Input=block_5_1,conv5_2_linear
Type=ElemWise
Operation=Sum
NbOutputs=[block_5_1]NbOutputs

[conv5_3_expand] conv_def
Input=block_5_2
KernelSize=1
NbOutputs=$(int(576 * ${ALPHA}))

[conv5_3_dwise] conv_def
Input=conv5_3_expand
KernelSize=3
Padding=1
Stride=2
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(576 * ${ALPHA}))

[conv5_3_linear] conv_def
Input=conv5_3_dwise
KernelSize=1
NbOutputs=$(int(160 * ${ALPHA}))
ActivationFunction=Linear

[conv6_1_expand] conv_def
Input=conv5_3_linear
KernelSize=1
NbOutputs=$(int(960 * ${ALPHA}))

[conv6_1_dwise] conv_def
Input=conv6_1_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(960 * ${ALPHA}))

[conv6_1_linear] conv_def
Input=conv6_1_dwise
KernelSize=1
NbOutputs=$(int(160 * ${ALPHA}))
ActivationFunction=Linear

[block_6_1]
Input=conv5_3_linear,conv6_1_linear
Type=ElemWise
Operation=Sum
NbOutputs=[conv5_3_linear]NbOutputs

[conv6_2_expand] conv_def
Input=block_6_1
KernelSize=1
NbOutputs=$(int(960 * ${ALPHA}))

[conv6_2_dwise] conv_def
Input=conv6_2_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(960 * ${ALPHA}))

[conv6_2_linear] conv_def
Input=conv6_2_dwise
KernelSize=1
NbOutputs=$(int(160 * ${ALPHA}))
ActivationFunction=Linear

[block_6_2]
Input=block_6_1,conv6_2_linear
Type=ElemWise
Operation=Sum
NbOutputs=[block_6_1]NbOutputs

[conv6_3_expand] conv_def
Input=block_6_2
KernelSize=1
NbOutputs=$(int(960 * ${ALPHA}))

[conv6_3_dwise] conv_def
Input=conv6_3_expand
KernelSize=3
Padding=1
Mapping.ChannelsPerGroup=1
NbOutputs=$(int(960 * ${ALPHA}))

[conv6_3_linear] conv_def
Input=conv6_3_dwise
KernelSize=1
NbOutputs=$(int(320 * ${ALPHA}))
ActivationFunction=Linear

[conv6_4] conv_def
Input=conv6_3_linear
KernelSize=1
NbOutputs=$(int(1280 * ${ALPHA}))

[pool6]
Input=conv6_4
Type=Pool
Pooling=Average
PoolDims=[conv6_4]_OutputsWidth [conv6_4]_OutputsHeight
NbOutputs=[conv6_4]NbOutputs
Mapping.ChannelsPerGroup=1

[fc7]
Input=pool6
Type=Fc
WeightsFiller=HeFiller
BiasFiller=ConstantFiller
BiasFiller.Value=0.0
NbOutputs=1000
ActivationFunction=Linear
ConfigSection=common.config,fc7.config
[fc7.config]
NoBias=0

[softmax]
Input=fc7
Type=Softmax
NbOutputs=[fc7]NbOutputs
WithLoss=1

[softmax.Target]
TopN=5

[common.config]
NoBias=1
WeightsSolver.LearningRate=${LR}
WeightsSolver.Decay=${WD}
BiasSolver.LearningRate=$(2.0 * ${LR})
BiasSolver.Decay=0.0
Solvers.Momentum=${MOMENTUM}
Solvers.LearningRatePolicy=PolyDecay
Solvers.Power=1.0
Solvers.MaxIterations=$([sp]_EpochSize * ${EPOCHS} / ${BATCH_SIZE})
