;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;    (C) Copyright 2017 CEA LIST. All Rights Reserved.
;    Contributor(s): Olivier BICHLER (olivier.bichler@cea.fr)
;
;    This software is governed by the CeCILL-C license under French law and
;    abiding by the rules of distribution of free software.  You can  use,
;    modify and/ or redistribute the software under the terms of the CeCILL-C
;    license as circulated by CEA, CNRS and INRIA at the following URL
;    "http://www.cecill.info".
;
;    As a counterpart to the access to the source code and  rights to copy,
;    modify and redistribute granted by the license, users are provided only
;    with a limited warranty  and the software's author,  the holder of the
;    economic rights,  and the successive licensors  have only  limited
;    liability.
;
;    The fact that you are presently reading this means that you have had
;    knowledge of the CeCILL-C license and that you accept its terms.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Run an ONNX model inside N2D2
; Use the script tools/mxnet_to_onnx.py to generate the ONNX model
; mobilenet_v1_1.0_224_mxnet.onnx

; ./n2d2.sh "$N2D2_MODELS/MobileNet_v1_ONNX_mxnet.ini" -seed 1 -test -w /dev/null

$BATCH_SIZE=256

DefaultModel=Frame_CUDA

; Database
[database]
Type=ILSVRC2012_Database
RandomPartitioning=0
Learn=1.0
;BackgroundClass=1  ; Necessary for Google MobileNet pre-trained models

; Environment (data pre-processing)
; Pre-processing is usually not included in the ONNX models available online.
; In the case of MobileNet, the standard ImageNet pre-processing must be added
; in order to reproduce the model reported accuracy.
; This can be easily done by adding N2D2 pre-processing blocks before importing
; the ONNX model.
; It is necessary to define the correct pre-processing and reproduce the 
; intended accuracy before running an export, in order for the calibration
; process to work on the right data distribution and therefore achieve the best
; accuracy after quantization.
[sp]
SizeX=224
SizeY=224
NbChannels=3
BatchSize=${BATCH_SIZE}

[sp.Transformation-1]
Type=RescaleTransformation
Width=256
Height=256

[sp.Transformation-2]
Type=PadCropTransformation
Width=224
Height=224

[sp.Transformation-3]
Type=RangeAffineTransformation
FirstOperator=Divides
FirstValue=255.0

[sp.Transformation-4]
Type=ColorSpaceTransformation
ColorSpace=RGB

[sp.Transformation-5]
Type=RangeAffineTransformation
FirstOperator=Minus
FirstValue=0.485 0.456 0.406 ; BGR format, same as in Caffe
SecondOperator=Divides
SecondValue=0.229 0.224 0.225


; Here, we insert an ONNX graph in the N2D2 flow the same way as a regular Cell
[onnx]
Input=sp
Type=ONNX
File=mobilenet_v1_1.0_224_mxnet.onnx

; We can add targets to ONNX cells
; The N2D2 cell names will match the ONNX names. You can easily find the ONNX
; cell names after running N2D2 or by opening the ONNX graph in a graph viewer
; like NETRON (https://lutzroeder.github.io/netron/)
[mobilenet0_dense0_fwd.Target-Top5]
TopN=5
