;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;    (C) Copyright 2020 CEA LIST. All Rights Reserved.
;    Contributor(s): David BRIAND (david.briand@cea.fr)
;                    Olivier BICHLER (olivier.bichler@cea.fr)    
;    This software is governed by the CeCILL-C license under French law and
;    abiding by the rules of distribution of free software.  You can  use,
;    modify and/ or redistribute the software under the terms of the CeCILL-C
;    license as circulated by CEA, CNRS and INRIA at the following URL
;    "http://www.cecill.info".
;
;    As a counterpart to the access to the source code and  rights to copy,
;    modify and redistribute granted by the license, users are provided only
;    with a limited warranty  and the software's author,  the holder of the
;    economic rights,  and the successive licensors  have only  limited
;    liability.
;
;    The fact that you are presently reading this means that you have had
;    knowledge of the CeCILL-C license and that you accept its terms.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ResNet-v2 model : https://arxiv.org/abs/1603.05027 , He, Kaiming, Xiangyu Zhang, Shaoqing Ren,
;                   and Jian Sun. In European Conference on Computer Vision, 
;                   pp. 630-645. Springer, Cham, 2016.
; ResNet models consists of residual blocks and came up to counter the effect of vanishing gradients

; ResNet-v2 : ResNet V2 applies Batch Normalization and ReLU activation to the input before
; the multiplication with the weight matrix (convolution operation):
;      |->Conv->BatchNorm->ReLu->Conv-BatchNorm->Relu->|
; Input|->-------------------------------------------->|+
; ILSVRC2012 Top-1 Accuracy : 77.42%
; ILSVRC2012 Top-5 Accuracy : 93.61%
; ResNet-101 : 101 Convolutions Layers
; Command to Test the ONNX model :
; ./n2d2.sh "$N2D2_MODELS/ONNX/resnet-101-v2-onnx.ini" -test

; Before to launch this model be sure that the ONNX model
; is installed. Else you have to run the script N2D2/tools/install_onnx_models.py with python2

; Resolution
$SIZE=224

; Training parameters
$LR=0.01
$WD=0.0005
$MOMENTUM=0.9
$BATCH_SIZE=4
$STEP_DECAY_EPOCHS=39
$STEP_DECAY_RATE=0.1
$EPOCHS=$(4 * ${STEP_DECAY_EPOCHS})

DefaultModel=Frame_CUDA

; Database
[database]
Type=ILSVRC2012_Database
RandomPartitioning=0
Learn=1.0

; Environment
[sp]
SizeX=${SIZE}
SizeY=${SIZE}
NbChannels=3
BatchSize=${BATCH_SIZE}

[sp.Transformation-1]
Type=RescaleTransformation
Width=256
Height=256
KeepAspectRatio=0
ResizeToFit=0

[sp.Transformation-2]
Type=PadCropTransformation
Width=${SIZE}
Height=${SIZE}

[sp.Transformation-3]
Type=RangeAffineTransformation
FirstOperator=Divides
FirstValue=255.0

[sp.Transformation-4]
Type=ColorSpaceTransformation
ColorSpace=RGB

[sp.Transformation-5]
Type=RangeAffineTransformation
FirstOperator=Minus
FirstValue=0.485 0.456 0.406 ; BGR format, same as in Caffe
SecondOperator=Divides
SecondValue=0.229 0.224 0.225

; Here, we insert an ONNX graph in the N2D2 flow the same way as a regular Cell
[onnx]
Input=sp
Type=ONNX
File=${N2D2_MODELS}/ONNX/resnet-101-v2/resnet101v2.onnx

[soft1]
Input=resnetv25_dense0_fwd
Type=Softmax
NbOutputs=1000
WithLoss=1

[soft1.Target]
TopN=5

[common.config]
NoBias=1
Solvers.LearningRate=${LR}
Solvers.Decay=${WD}
Solvers.Momentum=${MOMENTUM}
Solvers.LearningRatePolicy=StepDecay
Solvers.LearningRateStepSize=$([sp]_EpochSize * ${STEP_DECAY_EPOCHS})
Solvers.LearningRateDecay=${STEPDECAY_RATE}
;Solvers.IterationSize=16
